/*
 * This file is generated by jOOQ.
 */
package com.jordansimsmith.immersion.tracker.jooq.tables;


import com.jordansimsmith.immersion.tracker.jooq.Keys;
import com.jordansimsmith.immersion.tracker.jooq.Public;
import com.jordansimsmith.immersion.tracker.jooq.tables.records.EpisodeRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Episode extends TableImpl<EpisodeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.episode</code>
     */
    public static final Episode EPISODE = new Episode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpisodeRecord> getRecordType() {
        return EpisodeRecord.class;
    }

    /**
     * The column <code>public.episode.id</code>.
     */
    public final TableField<EpisodeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.episode.file_name</code>.
     */
    public final TableField<EpisodeRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.episode.folder_name</code>.
     */
    public final TableField<EpisodeRecord, String> FOLDER_NAME = createField(DSL.name("folder_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.episode.timestamp</code>.
     */
    public final TableField<EpisodeRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Episode(Name alias, Table<EpisodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Episode(Name alias, Table<EpisodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.episode</code> table reference
     */
    public Episode(String alias) {
        this(DSL.name(alias), EPISODE);
    }

    /**
     * Create an aliased <code>public.episode</code> table reference
     */
    public Episode(Name alias) {
        this(alias, EPISODE);
    }

    /**
     * Create a <code>public.episode</code> table reference
     */
    public Episode() {
        this(DSL.name("episode"), null);
    }

    public <O extends Record> Episode(Table<O> child, ForeignKey<O, EpisodeRecord> key) {
        super(child, key, EPISODE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EpisodeRecord, Integer> getIdentity() {
        return (Identity<EpisodeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EpisodeRecord> getPrimaryKey() {
        return Keys.EPISODE_PKEY;
    }

    @Override
    public Episode as(String alias) {
        return new Episode(DSL.name(alias), this);
    }

    @Override
    public Episode as(Name alias) {
        return new Episode(alias, this);
    }

    @Override
    public Episode as(Table<?> alias) {
        return new Episode(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Episode rename(String name) {
        return new Episode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Episode rename(Name name) {
        return new Episode(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Episode rename(Table<?> name) {
        return new Episode(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
